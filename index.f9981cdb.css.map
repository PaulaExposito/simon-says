{"mappings":"AAAA,KAGA,kBAAA,CAEA,qBAAA,CAHA,qBAIA,CAEA,UAPA,YAWA,CAJA,KAEA,sBAAA,CACA,UACA,CC8IA,8BACE,wBAA6B,CAC7B,WAAY,CACZ,UACF,CC3IA,qBD8IE,kBAAW,CADX,UC1IF,CD6IA,qBAEE,kBAAI,CC7IJ,WAEF,CACA,0BD6IA,wBAAA,CAEE,UAAS,CAET,cAAY,CC/IZ,WAAY,CD8IZ,iBC1IF,CC6CA,MAOE,eAA0B,CAF1B,YAAa,CAFb,sBAAuB,CAGvB,YAEF,CDzCA,eCmCE,kBAAmB,CADnB,YD7BF,CALA,SC8CE,4BAAmB,CAHnB,UDtCF,CEtBA,WC+CE,kBAAmB,CALnB,wBAA2B,CAG3B,YAAa,CD3Cb,qBAAsB,CCuCtB,YAAa,CAKb,sBAAuB,CAHvB,eAAgB,CAHhB,SDrCF","sources":["src/css/index.css","src/js/components/Game.vue","%3Cinput%20css%20XFMbz5%3E","src/js/components/Login.vue","src/js/components/Lose.vue","src/js/App.vue"],"sourcesContent":["body {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    background-color: lightslategray;\n}\n\n#app {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n}","<template>\n  <div class=\"containerGame\">\n    <n-space class=\"info\" justify=\"space-around\">\n      <span><b>Tiempo restante:</b> {{ time }}</span>\n      <span><b>Ronda:</b> {{ round }}</span>\n      <span><b>Nivel:</b> {{ rules[level].name }}</span>\n    </n-space>\n\n    <div id=\"countdown\"></div>\n    <div id=\"game\"></div>\n\n    <!-- <n-space>\n      <n-button type=\"primary\" @click=\"nextState('win')\">Ganaste</n-button><br>\n      <n-button type=\"primary\" @click=\"nextState('lose')\">Perdiste</n-button>\n    </n-space> -->\n  </div>\n</template>\n\n<script>\nimport { NButton, NSpace } from \"naive-ui\";\nimport { STATES } from \"../../assets/variables\";\n\nexport default {\n  name: \"Game\",\n  components: {\n    NButton,\n    NSpace,\n  },\n  props: {\n    level: Number,\n  },\n  data() {\n    return {\n      sequenceSize: 0,\n      time: 0,\n      round: 0,\n      running: false,\n      rules: {\n        0: {\n          name: \"Fácil\",\n          numInitObjects: 4,\n          timeForObject: 3,\n          timeMultiplier: 3, // 3 * sequenceSize\n        },\n        1: {\n          name: \"Medio\",\n          numInitObjects: 5,\n          timeForObject: 2,\n          timeMultiplier: 2,\n        },\n        2: {\n          name: \"Difícil\",\n          numInitObjects: 6,\n          timeForObject: 1,\n          timeMultiplier: 1.5,\n        },\n      },\n      threeJS: {\n        scene: null,\n        camera: null,\n        renderer: null,\n        cube: null\n      }\n    };\n  },\n  mounted() {\n    this.displayInfo();\n    this.displayCountdown();\n  },\n  watch: {\n    running() {\n      if (this.running === true) this.start();\n    },\n  },\n  methods: {\n    nextState(action) {\n      if (action === \"win\")\n        this.$emit(\"changeState\", { state: STATES.WIN_STATE });\n      else this.$emit(\"changeState\", { state: STATES.LOSE_STATE });\n    },\n    displayInfo() {\n      this.round++;\n      this.sequenceSize = this.rules[this.level].numInitObjects;\n      this.time =\n        this.sequenceSize *\n        this.rules[this.level].timeForObject *\n        this.rules[this.level].timeMultiplier;\n    },\n    displayCountdown() {\n      let contdown = 3;\n      const intervalId = setInterval(countdown, 1000);\n      const node = document.getElementById(\"countdown\");\n      node.style.display = \"block\";\n      const thisOrigin = this;\n\n      function countdown() {\n        if (contdown == 0) {\n          node.textContent = \"¡YA!\";\n          clearInterval(intervalId);\n          setTimeout(() => {\n            node.style.display = \"none\";\n            thisOrigin.running = true;\n          }, 1000);\n        } else {\n          node.textContent = contdown;\n          contdown--;\n        }\n      }\n    },\n    start() {\n      const gameNode = document.getElementById(\"game\");\n      console.log(\"start\");\n\n      // To display anything with ThreeJS we need a scene, a camera and a renderer\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(\n        75,\n        gameNode.clientWidth / gameNode.clientHeight,\n        0.1,\n        1000\n      );\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(gameNode.clientWidth, gameNode.clientHeight);\n      document.getElementById(\"game\").appendChild(this.renderer.domElement);\n\n      // Build a cube\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n      this.cube = new THREE.Mesh(geometry, material);\n      this.scene.add(this.cube); // By default puts the cube at (0,0,0), the same coordinates where the camera is so we need to move the camera\n\n      this.camera.position.z = 5;\n\n      // Render the scene\n      // It is a loop that draw the scene every time the screen is refresed (about 60 times/second)\n      this.animate();\n\n\n\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n\n      // Animate the cube\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n\n      this.renderer.render(this.scene, this.camera);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.containerGame {\n  background-color: lightsalmon;\n  height: 100%;\n  width: 100%;\n}\n\n.info {\n  width: 100%;\n  background: lightgrey;\n}\n\n#game {\n  height: 100%;\n  background: cornflowerblue;\n}\n\n#countdown {\n  background-color: crimson;\n  height: 30px;\n  color: white;\n  text-align: center;\n  font-size: 20px;\n}\n</style>\n","body {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    background-color: lightslategray;\n}\n\n#app {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n}\n\n.containerGame[data-v-d7696a] {\n  background-color: lightsalmon;\n  height: 100%;\n  width: 100%;\n}\n.info[data-v-d7696a] {\n  width: 100%;\n  background: lightgrey;\n}\n#game[data-v-d7696a] {\n  height: 100%;\n  background: cornflowerblue;\n}\n#countdown[data-v-d7696a] {\n  background-color: crimson;\n  height: 30px;\n  color: white;\n  text-align: center;\n  font-size: 20px;\n}\n\n\n.cont {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 200px;\n  padding: 40px 40px 40px 40px;\n  background: lightslategray;\n}\n.buttons {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n\n\n.container {\n  display: flex;\n  flex-direction: column;\n}\n\n\n.container {\n  display: flex;\n  flex-direction: column;\n}\n\n\n.container {\n  display: flex;\n  flex-direction: column;\n}\n\n\n.container {\n  display: flex;\n  flex-direction: column;\n}\n\n\n.container {\n  display: flex;\n  flex-direction: column;\n}\n\n\n.container {\n  width: 80%;\n  height: 700px;\n  background-color: lightgrey;\n  overflow: hidden;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/*# sourceMappingURL=index.f9981cdb.css.map */\n","<template>\n  <div class=\"cont\">\n    <n-form :label-width=\"80\">\n      <n-form-item label=\"Email\" path=\"user.email\">\n        <n-input v-model:value=\"user.email\" placeholder=\"Email\" />\n      </n-form-item>\n      <n-form-item label=\"Contraseña\" path=\"user.password\">\n        <n-input\n          v-model:value=\"user.password\"\n          type=\"password\"\n          placeholder=\"Contraseña\"\n        />\n      </n-form-item>\n      <n-form-item>\n        <div class=\"buttons\">\n          <n-button secondary @click=\"signin\">Entrar</n-button>\n          <n-button type=\"primary\" @click=\"signup\">Registrarse</n-button>\n        </div>\n      </n-form-item>\n    </n-form>\n  </div>\n</template>\n\n<script>\nimport {\n  getAuth,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { NButton, NForm, NInput, NFormItem } from \"naive-ui\";\n\nexport default {\n  name: \"Login\",\n  components: {\n    NButton,\n    NInput,\n    NForm,\n    NFormItem,\n  },\n  data() {\n    return {\n      formValue: \"\",\n      user: {\n        email: \"\",\n        password: \"\",\n      },\n    };\n  },\n  methods: {\n    signup() {\n      const auth = getAuth();\n      createUserWithEmailAndPassword(auth, this.user.email, this.user.password)\n        .then((userCredential) => {\n          // Signed in\n          const user = userCredential.user;\n          this.$emit(\"logged\", user);\n        })\n        .catch((error) => {\n          window.alert(`Error ${error.code}: ${error.message}`);\n        });\n    },\n    signin() {\n      const auth = getAuth();\n      signInWithEmailAndPassword(auth, this.user.email, this.user.password)\n        .then((userCredential) => {\n          // Signed in\n          const user = userCredential.user;\n          this.$emit(\"logged\", user);\n        })\n        .catch((error) => {\n          window.alert(`Error ${error.code}: ${error.message}`);\n        });\n    },\n  },\n};\n</script>\n\n<style>\n.cont {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 200px;\n  padding: 40px 40px 40px 40px;\n  background: lightslategray;\n}\n\n.buttons {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n</style>","<template>\n  <div class=\"container\">\n    <h2>¡Perdiste! :(</h2>\n    <n-button type=\"primary\" @click=\"nextState\">Volver al menú principal</n-button>\n  </div>\n</template>\n\n<script>\nimport { NButton } from \"naive-ui\";\nimport { STATES } from \"../../assets/variables\";\n\nexport default {\n  name: \"Lose\",\n  components: {\n    NButton,\n  },\n  data() {\n    return {};\n  },\n  methods: {\n    nextState() {\n      this.$emit(\"changeState\", { state: STATES.CHOOSE_LEVEL_STATE });\n    },\n  },\n};\n</script>\n\n<style>\n.container {\n  display: flex;\n  flex-direction: column;\n}\n</style>","<template>\n  <div class=\"container\">\n    <!-- <Game></Game> -->\n    <Login v-if=\"currentState === states.LOGIN_STATE\" v-on:logged=\"setLoggedUser\"></Login>\n\t\t<Instructions v-else-if=\"currentState === states.INSTRUCTION_STATE\" v-on:changeState=\"nextState\"></Instructions>\n\t\t<Level v-if=\"currentState === states.CHOOSE_LEVEL_STATE\" v-on:changeState=\"nextState\"></Level>\n\t\t<Game v-if=\"currentState === states.GAME_STATE\" v-on:changeState=\"nextState\" :level=level></Game>\n\t\t<Ranking v-if=\"currentState === states.RANKINGS_STATE\" v-on:changeState=\"nextState\"></Ranking>\n\t\t<Win v-if=\"currentState === states.WIN_STATE\" v-on:changeState=\"nextState\"></Win>\n\t\t<Lose v-if=\"currentState === states.LOSE_STATE\" v-on:changeState=\"nextState\"></Lose>\n\n\t\t<!-- <Game :level=0></Game> -->\n\n  </div>\n</template>\n\n<script>\nimport Game from \"./components/Game.vue\";\nimport Login from \"./components/Login.vue\";\nimport Instructions from \"./components/Instructions.vue\";\nimport Level from \"./components/Level.vue\";\nimport Ranking from \"./components/Ranking.vue\";\nimport Win from \"./components/Win.vue\";\nimport Lose from \"./components/Lose.vue\";\n\nimport { STATES } from \"../assets/variables\";\n\nexport default {\n  name: \"App\",\n  components: {\n    Game,\n    Login,\n    Instructions,\n    Level,\n    Ranking,\n    Win,\n    Lose,\n  },\n  data() {\n    return {\n      name: \"Vue\",\n      loggedUser: false,\n      level: null,\n      user: {\n        email: \"\",\n        name: \"\",\n      },\n      currentState: STATES.LOGIN_STATE,\n\t\t\tstates: STATES\n    };\n  },\n  methods: {\n    setLoggedUser(user) {\n      this.loggedUser = true;\n      this.user.email = user.email;\n      this.user.name = this.user.email.split(\"@\")[0];\n      this.nextState({ state: STATES.INSTRUCTION_STATE });\n    },\n    nextState(args) {\n      this.currentState = args.state;\n      this.level = args.level;\n    },\n  },\n};\n</script>\n\n<style>\n.container {\n  width: 80%;\n  height: 700px;\n  background-color: lightgrey;\n  overflow: hidden;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n"],"names":[],"version":3,"file":"index.f9981cdb.css.map"}